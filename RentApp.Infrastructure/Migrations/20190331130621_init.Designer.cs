// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentApp.Infrastructure.Context;

namespace RentApp.Infrastructure.Migrations
{
    [DbContext(typeof(RentContext))]
    [Migration("20190331130621_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034");

            modelBuilder.Entity("RentApp.Infrastructure.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<DateTime>("DateOfUpdate");

                    b.Property<string>("Street");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("RentApp.Infrastructure.Flat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AddressId");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<DateTime>("DateOfUpdate");

                    b.Property<string>("District");

                    b.Property<int>("Floor");

                    b.Property<int>("NumberOfRooms");

                    b.Property<long?>("OwnerId");

                    b.Property<decimal>("Price");

                    b.Property<int>("SquareMeters");

                    b.Property<bool>("isElevator");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Flat");
                });

            modelBuilder.Entity("RentApp.Infrastructure.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Data");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<DateTime>("DateOfUpdate");

                    b.Property<long?>("FlatId");

                    b.HasKey("Id");

                    b.HasIndex("FlatId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("RentApp.Infrastructure.Owner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AddressId");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<DateTime>("DateOfUpdate");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("RentApp.Infrastructure.Tenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AddressId");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<DateTime>("DateOfUpdate");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("RentApp.Infrastructure.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AddressId");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<DateTime>("DateOfUpdate");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("RentApp.Infrastructure.Flat", b =>
                {
                    b.HasOne("RentApp.Infrastructure.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("RentApp.Infrastructure.Owner", "Owner")
                        .WithMany("Flats")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RentApp.Infrastructure.Image", b =>
                {
                    b.HasOne("RentApp.Infrastructure.Flat", "Flat")
                        .WithMany("Images")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RentApp.Infrastructure.Owner", b =>
                {
                    b.HasOne("RentApp.Infrastructure.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("RentApp.Infrastructure.Tenant", b =>
                {
                    b.HasOne("RentApp.Infrastructure.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("RentApp.Infrastructure.Flat", "Flat")
                        .WithOne("Tenant")
                        .HasForeignKey("RentApp.Infrastructure.Tenant", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RentApp.Infrastructure.User", b =>
                {
                    b.HasOne("RentApp.Infrastructure.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });
#pragma warning restore 612, 618
        }
    }
}
